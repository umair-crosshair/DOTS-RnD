//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.1
//     from Assets/TroopControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TroopControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TroopControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TroopControls"",
    ""maps"": [
        {
            ""name"": ""troop action map"",
            ""id"": ""8624107d-56c5-4fa7-80ff-2f97ea449d30"",
            ""actions"": [
                {
                    ""name"": ""troop movement"",
                    ""type"": ""Value"",
                    ""id"": ""844290a6-b9de-4da9-815c-b11051b66aa6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""514d3228-cde5-42bb-8b13-635dc53249e9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""troop movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""707e1db5-2048-46f5-8527-624ece77b1a1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""troop movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""45f64fff-b2e5-48cc-9174-83c11fe76964"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""troop movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cd024ae5-5897-4b38-a4f9-b11d99280152"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""troop movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c690845a-b87e-4282-a250-7997311c726a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""troop movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""ArrowKeys"",
                    ""id"": ""4f4a871e-7cb4-4aa0-9a55-a1bbc1128f42"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""troop movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ad520fa1-6535-4970-aae9-cd8734443b97"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""troop movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""95cf3378-c76e-4ad2-97a4-344bda269a7f"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""troop movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""bf12329a-aba8-4b70-a6c8-5d2628ea7231"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""troop movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5f97f0a3-e4bf-4e97-82e7-22593072c59a"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""troop movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // troop action map
        m_troopactionmap = asset.FindActionMap("troop action map", throwIfNotFound: true);
        m_troopactionmap_troopmovement = m_troopactionmap.FindAction("troop movement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // troop action map
    private readonly InputActionMap m_troopactionmap;
    private List<ITroopactionmapActions> m_TroopactionmapActionsCallbackInterfaces = new List<ITroopactionmapActions>();
    private readonly InputAction m_troopactionmap_troopmovement;
    public struct TroopactionmapActions
    {
        private @TroopControls m_Wrapper;
        public TroopactionmapActions(@TroopControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @troopmovement => m_Wrapper.m_troopactionmap_troopmovement;
        public InputActionMap Get() { return m_Wrapper.m_troopactionmap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TroopactionmapActions set) { return set.Get(); }
        public void AddCallbacks(ITroopactionmapActions instance)
        {
            if (instance == null || m_Wrapper.m_TroopactionmapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TroopactionmapActionsCallbackInterfaces.Add(instance);
            @troopmovement.started += instance.OnTroopmovement;
            @troopmovement.performed += instance.OnTroopmovement;
            @troopmovement.canceled += instance.OnTroopmovement;
        }

        private void UnregisterCallbacks(ITroopactionmapActions instance)
        {
            @troopmovement.started -= instance.OnTroopmovement;
            @troopmovement.performed -= instance.OnTroopmovement;
            @troopmovement.canceled -= instance.OnTroopmovement;
        }

        public void RemoveCallbacks(ITroopactionmapActions instance)
        {
            if (m_Wrapper.m_TroopactionmapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITroopactionmapActions instance)
        {
            foreach (var item in m_Wrapper.m_TroopactionmapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TroopactionmapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TroopactionmapActions @troopactionmap => new TroopactionmapActions(this);
    public interface ITroopactionmapActions
    {
        void OnTroopmovement(InputAction.CallbackContext context);
    }
}
